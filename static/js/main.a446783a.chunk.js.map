{"version":3,"sources":["components/informationCard.js","components/cityInformation.js","components/header.js","components/dataVisualize/map.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","marginLeft","marginTop","marginBottom","bullet","display","margin","transform","title","fontSize","pos","SimpleCard","props","classes","Card","className","style","CardContent","justifyContent","textAlign","Typography","variant","component","name","total","active","died","CityInformation","Grid","container","Fragment","array","map","zone","Headers","header","MapContainer","onLoad","circle","console","log","onUnmount","googleMapsApiKey","mapContainerStyle","height","width","zoom","center","lat","lng","cities","city","options","App","useState","abOlddata","setabOlddata","abData","setabData","yesterday","date","Date","setDate","getDate","getFullYear","getMonth","getYesterdaysDate","removeDuplicates","originalArray","prop","newArray","lookupObject","i","push","useEffect","fetch","method","headers","then","resp","json","catch","error","uniqueArray","uniqueOldArray","finalizeArray","finalArray","newObject","zoneArray","filter","length","death","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","opacity","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a446783a.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 200,\n    marginLeft: \"10%\",\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function SimpleCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} style={{marginLeft:\"3%\"}}>\n      <CardContent\n        style={{\n          justifyContent: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.name}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Total cases: {props.total}\n          <br />\n          Active cases: {props.active}\n          <br />\n          Deaths: {props.died}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Card from \"../components/informationCard\";\nfunction CityInformation(props){\n    return(\n<Grid container style={{marginLeft:\"7%\"}} >\n        <React.Fragment>\n        \n          {props.array.map(function (zone) {\n            return (\n                <Card \n                  name={zone[\"alberta_health_services_zone\"]}\n                  total={zone[\"total case\"]}\n                  active={zone[\"total active\"]}\n                  died={zone[\"total death\"]}\n                />\n        \n            );\n          })}\n          </React.Fragment>\n          </Grid>\n    )\n}\nexport default CityInformation","import React from 'react'\n\nexport default function Headers(props){\n    return(\n    <h1 style={{ marginLeft: \"8%\" }}>{props.header}</h1>\n    )\n}","import React from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Circle } from '@react-google-maps/api';\n\n\nconst MapContainer = (props) => {\n  \n  const mapStyles = {        \n    height: \"50vh\",\n    width: \"82%\",\n    marginLeft:\"10%\",\n    marginBottom:\"15%\"\n    };\n  \n  const defaultCenter = {\n    lat: 54.861, lng: -116.4938\n  }\n\n  const options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: 50000,\n    zIndex: 1\n  }\n  \n\n  const onLoad = circle => {\n    console.log('Circle onLoad circle: ', circle)\n  }\n  \n  const onUnmount = circle => {\n    console.log('Circle onUnmount circle: ', circle)\n  }\n  return (\n     <LoadScript\n       googleMapsApiKey='AIzaSyA3lBAg4Tn0DQvw9gJ8ZRBKV52nLzCru1E'>\n        <GoogleMap\n        \n          mapContainerStyle={mapStyles}\n          zoom={5.2}\n          center={defaultCenter}\n        >\n          {props.cities.map(function (city) {\n           \n            return (\n              <div>\n              <Circle\n              // optional\n              onLoad={onLoad}\n              // optional\n              onUnmount={onUnmount}\n              // required\n              center={city[0]}\n              // required\n              options={city[1]}\n            />\n            <Circle\n            // optional\n            onLoad={onLoad}\n            // optional\n            onUnmount={onUnmount}\n            // required\n            center={city[0]}\n            // required\n            options={city[2]}\n          />\n          </div>\n        \n            );\n          })}\n              \n        \n            \n          \n            </GoogleMap>\n     </LoadScript>\n  )\n  }\nexport default MapContainer;","import \"moment-timezone\";\nimport React, { useState, useEffect } from \"react\";\nimport CityInformation from './components/cityInformation'\nimport Header from './components/header';\nimport \"./App.css\";\n\nimport MapContainer from './components/dataVisualize/map';\n\nfunction App() {\n  /***********get data from API ******************************************************8 */\n  var albertaData = [];\n  var albertaOlddata = []\n  const [abOlddata, setabOlddata] = useState( albertaOlddata );\n  const [abData, setabData] = useState( albertaData );\n\n  /**\n   * /**\n    * @param {void} getYesterdaysDate - this function is help to get yesterday's date .\n    */\n\nfunction getYesterdaysDate() {\n  var date = new Date();\n  date.setDate(date.getDate()-2);\n  return date.getFullYear() + '-' + (date.getMonth()+1) + '-' + date.getDate();\n}\n\nvar yesterday = getYesterdaysDate()\n\n\n  useEffect(() => {\n      fetch(`https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,{\n        method:'GET',\n        headers:{\n          'Content-Type':'applicaiton/json',\n        }\n      }).then(resp=>resp.json())\n      .then(resp=> setabData(resp))\n      .catch(error=> console.log(error))\n  }, []);\n  /**************************************************************************** */\n  useEffect(() => {\n    fetch(`https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$where=date_reported between '2020-03-06' and '${yesterday}'&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,{\n      method:'GET',\n      headers:{\n        'Content-Type':'applicaiton/json',\n      }\n    }).then(resp=>resp.json())\n    .then(resp=> setabOlddata(resp))\n    .catch(error=> console.log(error))\n}, []);\n  /*----------------------------------------removeDuplicates-------------------------*/\n  function removeDuplicates(originalArray, prop) {\n    var newArray = [];\n    var lookupObject = {};\n    for (var i in originalArray) {\n      lookupObject[originalArray[i][prop]] = originalArray[i];\n    }\n    for (i in lookupObject) {\n      newArray.push(lookupObject[i]);\n    }\n    return newArray;\n  }\n  //reference:https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n  var uniqueArray = removeDuplicates(abData, \"alberta_health_services_zone\");\n  var uniqueOldArray = removeDuplicates(abOlddata,\"alberta_health_services_zone\")\n  /*--------------------------------------Finalize the array-------------------------*/\n  function finalizeArray(originalArray, uniqueArray) {\n    var finalArray = [];\n    for (let i = 0; i < uniqueArray.length; i++) {\n      var newObject = {};\n      newObject[\"alberta_health_services_zone\"] =\n        uniqueArray[i][\"alberta_health_services_zone\"];\n      var zoneArray = originalArray.filter(\n        (city) =>\n          city[\"alberta_health_services_zone\"] ===\n          uniqueArray[i][\"alberta_health_services_zone\"]\n      );\n      newObject[\"total case\"] = zoneArray.length;\n      newObject[\"total active\"] = zoneArray.filter(\n        (active) => active[\"case_status\"] === \"Active\"\n      ).length;\n      newObject[\"total death\"] = zoneArray.filter(\n        (death) => death[\"case_status\"] === \"Died\"\n      ).length;\n      finalArray.push(newObject);\n    }\n    return finalArray;\n  }\n  /*---------------------------------Array has been finalized-----------------------*/\n  var array = finalizeArray(abData, uniqueArray);\n  if (array.length === 0)\n    return null;\n  console.log(array)\n  var oldarray = finalizeArray(abOlddata,uniqueOldArray);\n  \n  //city location\n  const edmonton = {\n    lat: 53.5461, lng: -113.4938\n  }\n  \n  const edmonton_options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[1][\"total active\"]*10,\n    zIndex: 1\n  }\n  const total_edmonton_options = {\n    strokeColor: '#00FF00',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#00FF00',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[1][\"total case\"]*5,\n    zIndex: 1\n  }\n  \n  const calgary = {\n    lat: 51.0447, lng: -114.0719\n  }\n\n  const calgary_options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[0][\"total active\"]*10,\n    zIndex: 1\n  }\n  const total_calgary_options = {\n    strokeColor: '#00FF00',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#00FF00',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[0][\"total case\"]*5,\n    zIndex: 1\n  }\n  const north = {\n    lat: 57.0000,lng: -115.0000\n  }\n  const north_options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[3][\"total active\"]*10,\n    zIndex: 1\n  }\n  const total_north_options = {\n    strokeColor: '#00FF00',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#00FF00',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[3][\"total case\"]*5,\n    zIndex: 1\n  }\n  const south = {\n    lat: 50.0000, lng: -112.0000\n  }\n  const south_options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[4][\"total active\"]*10,\n    zIndex: 1\n  }\n  const total_south_options = {\n    strokeColor: '#00FF00',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#00FF00',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[4][\"total case\"]*5,\n    zIndex: 1\n  }\n  const central = {\n    lat: 52.0000, lng: -113.2900\n  }\n  const central_options = {\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[2][\"total active\"]*10,\n    zIndex: 1\n  }\n  const total_central_options = {\n    strokeColor: '#00FF00',\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: '#00FF00',\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[2][\"total case\"]*5,\n    zIndex: 1\n  }\n\n  const cities =[[edmonton,edmonton_options,total_edmonton_options],[calgary,calgary_options,total_calgary_options],[north,north_options,total_north_options],[south,south_options,total_south_options], [central,central_options,total_central_options]]\n  \n  return (\n    <div>\n\n      <div className=\"App_header\">\n        <Header header = 'Alberta Covid-19 Tracker' ></Header>\n      </div>\n        <React.Fragment style={{ width: \"20%\", opacity: \"90%\" }}>\n        <h2 style={{marginLeft:\"10%\" ,marginRight:\"30%\"}}> Alberta total:  {abData.length}  </h2>\n        <h2 style={{marginLeft:\"10%\" ,marginRight:\"30%\"}}> Alberta today increased cases:  {abData.length-abOlddata.length}  </h2>\n        </React.Fragment>\n       <CityInformation array={array} />\n       <MapContainer cities = {cities} />\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}