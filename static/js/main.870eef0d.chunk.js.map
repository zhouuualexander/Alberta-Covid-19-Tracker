{"version":3,"sources":["Assets/edmonton-banner.jpg","Assets/calgary_final_revised.jpg","components/TitleBar/TitleBar.js","components/Copyright/Copyright.js","Helper/dataFilter.js","components/Loading/Loading.js","components/InformationCard/InformationCard.js","components/ImgMediaCard/ImgMediaCard.js","components/ZoneCard/ZoneCard.js","components/Visualization/Alberta.js","components/Visualization/Gender.js","components/Visualization/City.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","titleBar","props","AppBar","position","color","Toolbar","style","marginLeft","fontSize","marginRight","Typography","variant","noWrap","Copyright","align","Link","href","Date","getFullYear","getYesterdaysDate","offset","date","setDate","getDate","getMonth","Example","type","height","width","makeStyles","root","minWidth","marginTop","marginBottom","bullet","display","margin","transform","title","pos","useStyles","maxWidth","ImgMediaCard","classes","cities","name","totalCases","edmontonData","length","activeCases","edmontonActive","diedCases","edmontonDied","recoveredCases","edmontonRecovered","calgaryData","calgaryActive","calgaryDied","calgaryRecovered","Fragment","map","city","Card","className","key","CardActionArea","disabled","CardMedia","component","alt","src","require","CardContent","gutterBottom","start","end","duration","CardActions","Button","size","target","ZoneCard","paragraph","albertaData","separator","Grid","container","spacing","justify","Demo","state","data","active","albertaActive","recovered","albertaRecovered","died","albertaDied","chartData","this","Paper","factory","scaleBand","text","valueField","argumentField","React","male","filter","gender","female","console","log","total","App","northData","northRecovered","northActive","northDied","southData","southRecovered","southActive","southDied","centralData","centralRecovered","centralActive","centralDied","axios","get","then","response","setState","theme","createMuiTheme","responsiveFontSizes","CssBaseline","TitleBar","ThemeProvider","justifyContent","Loading","Container","item","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.870eef0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edmonton-banner.37de0d12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calgary_final_revised.b96e6bf0.jpg\";","import React from \"react\";\nimport { Typography, AppBar, Toolbar } from \"@material-ui/core\";\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\n\nconst titleBar = (props) => {\n\n    return (\n        <div>\n\n            <AppBar position=\"relative\" color=\"primary\" >\n                <Toolbar style={{ marginLeft: \"10%\" }}>\n                    <TrendingDownIcon fontSize=\"large\" style={{ marginRight: \"1%\" }} />\n                    <Typography variant=\"h6\" noWrap color=\"inherit\">\n                        Alberta COVID-19 Tracker\n    </Typography>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default titleBar;","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nconst Copyright = () => {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://www.linkedin.cn/in/zijian-zhou/\">\n        {\"Zijian Zhou\"}\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n\n};\nexport default Copyright;\n","export const getYesterdaysDate = (offset) => {\n    /**\n     *  yesterday: offset=2, dayBeforeYesterday: offset = 3\n     */\n    let date = new Date();\n    date.setDate(date.getDate() - offset);\n    return (\n        date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n    );\n};\n\n/*----------------------------------------removeDuplicates-------------------------*/\nexport const removeDuplicates = (originalArray, prop) => {\n    let newArray = [];\n    let lookupObject = {};\n    for (let i in originalArray) {\n        lookupObject[originalArray[i][prop]] = originalArray[i];\n    }\n    for (let i in lookupObject) {\n        newArray.push(lookupObject[i]);\n    }\n    return newArray;\n};\n//reference:https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n\n/*--------------------------------------Finalize the array-------------------------*/\nexport const finalizeArray = (originalArray, uniqueArray) => {\n    let finalArray = [];\n    for (let i = 0; i < uniqueArray.length; i++) {\n        let newObject = {};\n        newObject[\"alberta_health_services_zone\"] =\n            uniqueArray[i][\"alberta_health_services_zone\"];\n        let zoneArray = originalArray.filter(\n            (city) =>\n                city[\"alberta_health_services_zone\"] ===\n                uniqueArray[i][\"alberta_health_services_zone\"]\n        );\n        newObject[\"total case\"] = zoneArray.length;\n        newObject[\"total active\"] = zoneArray.filter(\n            (active) => active[\"case_status\"] === \"Active\"\n        ).length;\n        newObject[\"total death\"] = zoneArray.filter(\n            (death) => death[\"case_status\"] === \"Died\"\n        ).length;\n        finalArray.push(newObject);\n    }\n    return finalArray;\n};","import React from 'react';\nimport ReactLoading from 'react-loading';\n\nconst Example = ({ type, color }) => (\n    <ReactLoading type={type} color={color} height={'10px'} width={'10px'}\n    />\n);\n\nexport default Example;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CountUp from 'react-countup';\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 307,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst InformationCard = (props) => {\n  const classes = useStyles();\n  if (props.name === \"Edmonton Zone\" || props.name === \"Calgary Zone\") {\n    return (\n      <Card className={classes.root}>\n        <CardContent\n        >\n          <Typography variant=\"h4\" >\n            {props.name}\n          </Typography>\n          <Typography variant=\"body1\" >\n            Total cases: {props.total}\n            <br />\n            Active cases: {props.active}\n            <br />\n            Deaths: {props.died}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  } else {\n    return (\n      <Card className={classes.root}>\n        <CardContent\n          style={{ margin: \"0\", justifyContent: \"center\", textAlign: \"center\" }}\n        >\n          <Typography variant=\"h5\" component=\"h2\" >\n            {props.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Total cases: {<CountUp start={0} end={props.total} duration={2.5} />}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n};\nexport default InformationCard;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CountUp from 'react-countup';\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 400,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight: 10,\n\n  },\n});\nconst ImgMediaCard = (props) => {\n  const classes = useStyles();\n  const cities = [\n    {\n      name: 'Edmonton',\n      totalCases: props.edmontonData.length,\n      activeCases: props.edmontonActive.length,\n      diedCases: props.edmontonDied.length,\n      recoveredCases: props.edmontonRecovered.length\n    },\n    {\n      name: 'Calgary',\n      totalCases: props.calgaryData.length,\n      activeCases: props.calgaryActive.length,\n      diedCases: props.calgaryDied.length,\n      recoveredCases: props.calgaryRecovered.length\n    }\n  ];\n  return (\n    <React.Fragment>\n      {cities.map((city) => {\n        return <Card className={classes.root} key={city}>\n          <CardActionArea disabled key={city}>\n            <CardMedia key={city}\n              component=\"img\"\n              alt={city.name === \"Edmonton\" ? \"Edmonton Zone\" :\n                \"Calgary Zone\"}\n              height=\"300px\"\n              src={city.name === \"Edmonton\" ?\n                require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/Assets/edmonton-banner.jpg') :\n                require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/Assets/calgary_final_revised.jpg')}\n              title={city.name === \"Edmonton\" ? \"Edmonton Zone\" :\n                \"Calgary Zone\"}\n            />\n            <CardContent key={city} >\n              <Typography gutterBottom variant=\"h5\" component=\"h2\" >\n                {city.name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                Total cases {<CountUp start={0} end={city.totalCases} duration={2.5} />}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                Recovered cases {<CountUp start={0} end={city.recoveredCases} duration={2.5} />}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                Active cases {<CountUp start={0} end={city.activeCases} duration={2.5} />}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                Death cases {<CountUp start={0} end={city.diedCases} duration={2.5} />}\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\" target=\"_blank\" href={city.name === \"Edmonton\" ?\n              \"https ://www.edmonton.ca/programs_services/emergency_preparedness/covid-19.aspx\" :\n              \"https://www.calgary.ca/csps/cema/covid19/response-to-coronavirus.html\"}>\n              More info\n          </Button>\n          </CardActions>\n        </Card>;\n      })}\n\n    </React.Fragment>\n\n  );\n};\nexport default ImgMediaCard;","import React from \"react\";\nimport { Typography, Container, Grid } from \"@material-ui/core\";\nimport OtherInformation from \"../OtherInformation/OtherInformation\";\nimport ImgMediaCard from '../ImgMediaCard/ImgMediaCard';\nimport CountUp from 'react-countup';\nconst ZoneCard = (props) => {\n    return (\n        <React.Fragment>\n            <Typography variant=\"h4\" align=\"center\" color=\"textSecondary\" paragraph style={{ marginTop: \"2%\" }} >\n                Alberta total: {<CountUp start={0} end={props.albertaData.length} duration={2.5} separator=',' />}\n            </Typography>\n            {/* <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                Alberta increased cases: {<CountUp start={0} end={props.data.length - props.oldData.length} duration={2.5} />} on {props.yesterday}\n            </Typography> */}\n            <Grid container spacing={2} justify=\"center\">\n                <ImgMediaCard\n                    edmontonData={props.edmontonData}\n                    edmontonActive={props.edmontonActive}\n                    edmontonRecovered={props.edmontonRecovered}\n                    edmontonDied={props.edmontonDied}\n                    calgaryData={props.calgaryData}\n                    calgaryActive={props.calgaryActive}\n                    calgaryRecovered={props.calgaryRecovered}\n                    calgaryDied={props.calgaryDied} />\n            </Grid>\n            <Grid container spacing={2} justify=\"center\">\n                {/* <OtherInformation array={props.array} /> */}\n            </Grid>\n        </React.Fragment>\n    );\n};\nexport default ZoneCard;","import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { Animation } from '@devexpress/dx-react-chart';\nimport {\n    Chart,\n    ArgumentAxis,\n    ValueAxis,\n    BarSeries,\n    Title,\n    Legend,\n    Tooltip\n} from '@devexpress/dx-react-chart-material-ui';\nimport { scaleBand } from '@devexpress/dx-chart-core';\nimport { ArgumentScale, Stack } from '@devexpress/dx-react-chart';\nimport { EventTracker, HoverState } from '@devexpress/dx-react-chart';\n\nexport default class Demo extends React.PureComponent {\n\n    state = {\n        data: [\n            { state: 'Active', active: this.props.albertaActive.length },\n            { state: 'Recovered', recovered: this.props.albertaRecovered.length },\n            { state: 'Died', died: this.props.albertaDied.length }\n        ]\n    };\n\n    render() {\n        const { data: chartData } = this.state;\n        return (\n            <Paper style={{ width: \"300px\" }}>\n\n                <Chart height={300}\n                    width={300}\n                    data={chartData}\n                >\n                    <Animation duration={3000} />\n                    <ArgumentScale factory={scaleBand} />\n                    <ArgumentAxis />\n                    <ValueAxis />\n                    <Title text=\"Alberta Covid-19\" />\n                    <BarSeries\n                        valueField=\"active\"\n                        argumentField=\"state\"\n                        name=\"Active\"\n                    />\n                    <BarSeries\n                        valueField=\"recovered\"\n                        argumentField=\"state\"\n                        name=\"Recovered\"\n                    />\n                    <BarSeries\n                        valueField=\"died\"\n                        argumentField=\"state\"\n                        name=\"Died\"\n                    />\n                    <EventTracker />\n                    <HoverState />\n                    <Tooltip />\n\n                </Chart>\n            </Paper>\n        );\n    }\n}\n\n","import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { Animation } from '@devexpress/dx-react-chart';\nimport {\n    Chart,\n    ArgumentAxis,\n    ValueAxis,\n    BarSeries,\n    Title,\n    Legend,\n    Tooltip\n} from '@devexpress/dx-react-chart-material-ui';\nimport { scaleBand } from '@devexpress/dx-chart-core';\nimport { ArgumentScale, Stack } from '@devexpress/dx-react-chart';\nimport { EventTracker, HoverState } from '@devexpress/dx-react-chart';\n\nexport default class Demo extends React.PureComponent {\n    state = {\n        data: [\n            {\n                state: 'Male', male: this.props.albertaData\n                    .filter((data) => {\n                        return data.gender === 'Male';\n                    }).length\n            },\n            {\n                state: 'Female', female: this.props.albertaData\n                    .filter((data) => {\n                        return data.gender === 'Female';\n                    }).length\n            },\n        ]\n    };\n    render() {\n        console.log('1', this.props.albertaData);\n        const { data: chartData } = this.state;\n        return (\n            <Paper style={{ width: \"300px\" }}>\n\n                <Chart height={300}\n                    width={300}\n                    data={chartData}\n                >\n                    <Animation duration={3000} />\n                    <ArgumentScale factory={scaleBand} />\n                    <ArgumentAxis />\n                    <ValueAxis />\n                    <Title text=\"Gender\" />\n                    <BarSeries\n                        valueField=\"male\"\n                        argumentField=\"state\"\n                        name=\"Male\"\n                    />\n                    <BarSeries\n                        valueField=\"female\"\n                        argumentField=\"state\"\n                        name=\"Female\"\n                    />\n\n                    <EventTracker />\n                    <HoverState />\n                    <Tooltip />\n                    <Legend />\n                </Chart>\n            </Paper>\n        );\n    }\n}\n\n","import * as React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { Animation } from '@devexpress/dx-react-chart';\nimport {\n    Chart,\n    ArgumentAxis,\n    ValueAxis,\n    BarSeries,\n    Title,\n    Legend,\n    Tooltip\n} from '@devexpress/dx-react-chart-material-ui';\nimport { scaleBand } from '@devexpress/dx-chart-core';\nimport { ArgumentScale, Stack } from '@devexpress/dx-react-chart';\nimport { EventTracker, HoverState } from '@devexpress/dx-react-chart';\n\nexport default class Demo extends React.PureComponent {\n    state = {\n        data: [\n            {\n                state: 'Edmonton',\n                recovered: this.props.edmontonData\n                    .filter((data) => {\n                        return data[\"case_status\"] === 'Recovered';\n                    }).length,\n                total: this.props.edmontonData.length\n            },\n            {\n                state: 'Calgary',\n                recovered: this.props.calgaryData\n                    .filter((data) => {\n                        return data[\"case_status\"] === 'Recovered';\n                    }).length,\n                total: this.props.calgaryData.length\n            },\n        ]\n    };\n    render() {\n        console.log('1', this.props.albertaData);\n        const { data: chartData } = this.state;\n        return (\n            <Paper style={{ width: \"300px\" }}>\n\n                <Chart height={300}\n                    width={300}\n                    data={chartData}\n                >\n                    <Animation duration={3000} />\n                    <ArgumentScale factory={scaleBand} />\n                    <ArgumentAxis />\n                    <ValueAxis />\n                    <Title text=\"Edmonton vs Calgary\" />\n                    <BarSeries\n                        valueField=\"total\"\n                        argumentField=\"state\"\n                        name=\"Total\"\n                    />\n                    <BarSeries\n                        valueField=\"recovered\"\n                        argumentField=\"state\"\n                        name=\"Active\"\n                    />\n\n                    <Stack />\n                    <EventTracker />\n                    <HoverState />\n                    <Legend />\n                    <Tooltip />\n                </Chart>\n            </Paper>\n        );\n    }\n}\n\n","import \"moment-timezone\";\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Container, CssBaseline } from \"@material-ui/core\";\nimport TitleBar from './components/TitleBar/TitleBar';\nimport MapContainer from \"./components/MapContainer/MapContainer\";\nimport Copyright from \"./components/Copyright/Copyright\";\nimport { getYesterdaysDate, removeDuplicates } from './Helper/dataFilter';\nimport { finalizeArray } from './Helper/dataFilter';\nimport locationGps from './constant/city';\nimport Loading from '../src/components/Loading/Loading';\nimport ZoneCard from './components/ZoneCard/ZoneCard';\nimport Alberta from './components/Visualization/Alberta';\nimport Gender from './components/Visualization/Gender';\nimport City from './components/Visualization/City';\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\n\nclass App extends Component {\n  /***********get data from API ******************************************************8 */\n  // var albertaData = [];\n  // var albertaOlddata = [];\n  // const [abOlddata, setabOlddata] = useState(albertaOlddata);\n  // const [abData, setabData] = useState(albertaData);\n  // https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq\n  // https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$where=date_reported between '2020-03-06' and '${dayBeforeYesterday}'&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`\n\n  // useEffect(() => {\n  //   fetch(\n  //     `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n  //     {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"applicaiton/json\",\n  //       },\n  //     }\n  //   )\n  //     .then((resp) => resp.json())\n  //     .then((resp) => setabData(resp))\n  //     .catch((error) => console.log(error));\n  // }, []);\n  // /**************************************************************************** */\n  // useEffect(() => {\n  //   fetch(\n  //     `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$where=date_reported between '2020-03-06' and '${dayBeforeYesterday}'&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n  //     {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"applicaiton/json\",\n  //       },\n  //     }\n  //   )\n  //     .then((resp) => resp.json())\n  //     .then((resp) => setabOlddata(resp))\n  //     .catch((error) => console.log(error));\n  // }, [dayBeforeYesterday]);\n\n  // let uniqueArray = removeDuplicates(abData, \"alberta_health_services_zone\");\n\n\n  /*---------------------------------Array has been finalized-----------------------*/\n  // let array = finalizeArray(abData, uniqueArray);\n  // if (array.length === 0) return null;\n\n  //city location\n  // const locationOptions = {\n  //   edmonton_options: {\n  //     strokeColor: \"#FF00FF\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#FF00FF\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[1][\"total active\"] * 100,\n  //     zIndex: 1,\n  //   },\n  //   total_edmonton_options: {\n  //     strokeColor: \"#00FF00\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#00FF00\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[1][\"total case\"] * 1000,\n  //     zIndex: 1,\n  //   }, calgary_options: {\n  //     strokeColor: \"#FFFF00\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#FFFF00\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[0][\"total active\"] * 100,\n  //     zIndex: 1,\n  //   }, total_calgary_options: {\n  //     strokeColor: \"#00FF00\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#00FF00\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[0][\"total case\"] * 10,\n  //     zIndex: 1,\n  //   }, north_options: {\n  //     strokeColor: \"#FF0000\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#FF0000\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[3][\"total active\"] * 100,\n  //     zIndex: 1,\n  //   }, total_north_options: {\n  //     strokeColor: \"#00FF00\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#00FF00\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[3][\"total case\"] * 10,\n  //     zIndex: 1,\n  //   }, south_options: {\n  //     strokeColor: \"#FF0000\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#FF0000\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[4][\"total active\"] * 100,\n  //     zIndex: 1,\n  //   }, total_south_options: {\n  //     strokeColor: \"#00FF00\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#00FF00\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[4][\"total case\"] * 10,\n  //     zIndex: 1,\n  //   }, central_options: {\n  //     strokeColor: \"#FF0000\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#FF0000\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[2][\"total active\"] * 100,\n  //     zIndex: 1,\n  //   }, total_central_options: {\n  //     strokeColor: \"#00FF00\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: \"#00FF00\",\n  //     fillOpacity: 0.35,\n  //     clickable: false,\n  //     draggable: false,\n  //     editable: false,\n  //     visible: true,\n  //     radius: array[2][\"total case\"] * 10,\n  //     zIndex: 1,\n  //   }\n  // };\n\n\n\n  // const cities = [\n  //   [locationGps.edmonton, locationOptions.edmonton_options, locationOptions.total_edmonton_options],\n  //   [locationGps.calgary, locationOptions.calgary_options, locationOptions.total_calgary_options],\n  //   [locationGps.north, locationOptions.north_options, locationOptions.total_north_options],\n  //   [locationGps.south, locationOptions.south_options, locationOptions.total_south_options],\n  //   [locationGps.central, locationOptions.central_options, locationOptions.total_central_options],\n  // ];\n  state = {\n    albertaData: null, albertaRecovered: [], albertaActive: [], albertaDied: [],\n    edmontonData: [], edmontonRecovered: [], edmontonActive: [], edmontonDied: [],\n    calgaryData: [], calgaryRecovered: [], calgaryActive: [], calgaryDied: [],\n    northData: [], northRecovered: [], northActive: [], northDied: [],\n    southData: [], southRecovered: [], southActive: [], southDied: [],\n    centralData: [], centralRecovered: [], centralActive: [], centralDied: [],\n  };\n  componentDidMount() {\n    axios.get('https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq')\n      .then((response) => {\n        const albertaData = response.data;\n\n        const edmontonData = albertaData.filter((data) => {\n          return (data['alberta_health_services_zone'] === 'Edmonton Zone');\n        });\n        const albertaRecovered = albertaData.filter((data) => {\n          return data['case_status'] === 'Recovered';\n        });\n        const albertaActive = albertaData.filter((data) => {\n          return data['case_status'] === 'Active';\n        });\n        const albertaDied = albertaData.filter((data) => {\n          return data['case_status'] === 'Died';\n        });\n        const edmontonTotalCases = edmontonData.length;\n        const edmontonRecovered = edmontonData.filter((data) => {\n          return data['case_status'] === 'Recovered';\n        });\n        const edmontonActive = edmontonData.filter((data) => {\n          return data['case_status'] === 'Active';\n        });\n        const edmontonDied = edmontonData.filter((data) => {\n          return data['case_status'] === 'Died';\n        });\n        const calgaryData = albertaData.filter((data) => {\n          return (data['alberta_health_services_zone'] === 'Calgary Zone');\n        });\n        const calgaryRecovered = calgaryData.filter((data) => {\n          return data['case_status'] === 'Recovered';\n        });\n        const calgaryActive = calgaryData.filter((data) => {\n          return data['case_status'] === 'Active';\n        });\n        const calgaryDied = calgaryData.filter((data) => {\n          return data['case_status'] === 'Died';\n        });\n        const northData = albertaData.filter((data) => {\n          return (data['alberta_health_services_zone'] === 'North Zone');\n        });\n        const northRecovered = northData.filter((data) => {\n          return data['case_status'] === 'Recovered';\n        });\n        const northActive = northData.filter((data) => {\n          return data['case_status'] === 'Active';\n        });\n        const northDied = northData.filter((data) => {\n          return data['case_status'] === 'Died';\n        });\n        const southData = albertaData.filter((data) => {\n          return (data['alberta_health_services_zone'] === 'South Zone');\n        });\n        const southRecovered = southData.filter((data) => {\n          return data['case_status'] === 'Recovered';\n        });\n        const southActive = southData.filter((data) => {\n          return data['case_status'] === 'Active';\n        });\n        const southDied = southData.filter((data) => {\n          return data['case_status'] === 'Died';\n        });\n        const centralData = albertaData.filter((data) => {\n          return (data['alberta_health_services_zone'] === 'Central Zone');\n        });\n        const centralRecovered = centralData.filter((data) => {\n          return data['case_status'] === 'Recovered';\n        });\n        const centralActive = centralData.filter((data) => {\n          return data['case_status'] === 'Active';\n        });\n        const centralDied = centralData.filter((data) => {\n          return data['case_status'] === 'Died';\n        });\n        this.setState({\n          albertaData, albertaRecovered, albertaActive, albertaDied,\n          edmontonData, edmontonRecovered, edmontonActive, edmontonDied,\n          calgaryData, calgaryRecovered, calgaryActive, calgaryDied,\n          northData, northRecovered, northActive, northDied,\n          southData, southRecovered, southActive, southDied,\n          centralData, centralRecovered, centralActive, centralDied\n        });\n      });\n  }\n  render() {\n    let yesterday = getYesterdaysDate(2);\n    let dayBeforeYesterday = getYesterdaysDate(3);\n    let theme = createMuiTheme();\n    theme = responsiveFontSizes(theme);\n    console.log(this.state.albertaData);\n\n    return (\n      // #2B588E\n      <React.Fragment>\n        <CssBaseline />\n        <TitleBar />\n        <main>\n          <ThemeProvider theme={theme}>\n            {this.state.albertaData === null ?\n              <div style={{ display: 'flex', justifyContent: 'center', marginBottom: '10px' }}>\n                <Loading type=\"spin\" color=\"black\" />\n              </div> :\n              <Container maxWidth='lg' style={{ marginBottom: '10px' }}>\n                <div style={{ marginBottom: '20px' }}>\n                  <ZoneCard albertaData={this.state.albertaData}\n                    edmontonData={this.state.edmontonData}\n                    edmontonActive={this.state.edmontonActive}\n                    edmontonRecovered={this.state.edmontonRecovered}\n                    edmontonDied={this.state.edmontonDied}\n                    calgaryData={this.state.calgaryData}\n                    calgaryActive={this.state.calgaryActive}\n                    calgaryRecovered={this.state.calgaryRecovered}\n                    calgaryDied={this.state.calgaryDied} />\n                </div>\n                <Grid container justify=\"center\" spacing={4}>\n                  <Grid item >\n                    <Alberta albertaActive={this.state.albertaActive}\n                      albertaRecovered={this.state.albertaRecovered}\n                      albertaDied={this.state.albertaDied} />\n                  </Grid>\n                  <Grid item >\n                    <Gender albertaData={this.state.albertaData} />\n                  </Grid>\n                  <Grid item >\n                    <City edmontonData={this.state.edmontonData} calgaryData={this.state.calgaryData} />\n                  </Grid>\n\n\n                </Grid>\n              </Container>\n            }\n\n\n          </ThemeProvider>\n        </main>\n        <footer>\n          <Copyright />\n        </footer>\n      </React.Fragment >\n    );\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}