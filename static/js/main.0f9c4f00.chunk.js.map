{"version":3,"sources":["component/informationCard.js","component/header.js","component/dataVisualize/barchart.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","marginLeft","marginTop","marginBottom","bullet","display","margin","transform","title","fontSize","pos","SimpleCard","props","classes","Card","className","CardContent","style","justifyContent","textAlign","Typography","variant","component","name","total","active","died","Headers","header","Component","App","useState","abData","setabData","useEffect","fetch","method","headers","then","resp","json","catch","error","console","log","array","originalArray","uniqueArray","finalArray","i","newObject","zoneArray","filter","city","length","death","push","finalizeArray","prop","newArray","lookupObject","removeDuplicates","Fragment","width","opacity","marginRight","Grid","container","map","zone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0f9c4f00.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 200,\n    marginLeft: \"10%\",\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function SimpleCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent\n        style={{\n          justifyContent: \"center\",\n          textAlign: \"center\",\n        }}\n      >\n        <Typography variant=\"h5\" component=\"h2\">\n          {props.name}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Total cases: {props.total}\n          <br />\n          Active cases: {props.active}\n          <br />\n          Deaths: {props.died}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import React from 'react'\n\nexport default function Headers(props){\n    return(\n    <h1 style={{ marginLeft: \"8%\" }}>{props.header}</h1>\n    )\n}","import React, { Component } from 'react'\nimport * as d3 from 'd3'\nclass BarChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n       }\n       componentDidMount() {\n         const dataset = [12, 31, 22, 17, 25, 18, 29, 14];\n         const w = 600;\n         const h = 300;\n         const svg = d3\n           .select(this.refs.chart)\n           .append(\"svg\")\n           .attr(\"width\", w)\n           .attr(\"height\", h)\n           .attr(\"class\", \"bar\");\n         svg\n           .selectAll(\"rect\")\n           .data(dataset)\n           .enter()\n           .append(\"rect\")\n           .attr(\"fill\", \"navy\")\n           .attr(\"class\", \"sBar\")\n           .attr(\"x\", (d, i) => i * 60)\n           .attr(\"y\", (d, i) => {\n              return h - 7 * d;\n            })\n           .attr(\"width\", 50)\n           .attr(\"height\", (d, i) => 7 * d)\n           .append(\"title\")\n           .text(d => d);\n         svg\n           .selectAll(\"text\")\n           .data(dataset)\n           .enter()\n           .append(\"text\")\n           .style(\"font-size\", 18)\n           .attr(\"fill\", \"red\")\n           .attr(\"x\", (d, i) => i * 60)\n           .attr(\"y\", (d, i) => h - 7 * d - 3)\n           .text(d => d);\n          }\n          render() {\n            const styles = {\n              container: {\n                display: \"grid\",\n                justifyItems: \"center\"\n              }\n            };\n          return (\n            <div ref=\"chart\" style={styles.container}>\n              <h1 style={{ textAlign: \"center\" }}>Hi, I'm the bar chart</h1>\n            </div>\n           );\n         }\n        }\nexport default BarChart","import \"moment-timezone\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../src/component/informationCard.js\";\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Header from './component/header';\nimport \"./App.css\";\nimport * as d3 from \"d3\";\nimport BarChart from './component/dataVisualize/barchart';\nfunction App() {\n  /***********get data from API ******************************************************8 */\n  var albertaData = [];\n  const [abData, setabData] = useState( albertaData );\n  useEffect(() => {\n      fetch(\"https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq\",{\n        method:'GET',\n        headers:{\n          'Content-Type':'applicaiton/json',\n        }\n      }).then(resp=>resp.json())\n      .then(resp=> setabData(resp))\n      .catch(error=> console.log(error))\n  }, []);\n  /**************************************************************************** */\n  /*----------------------------------------removeDuplicates-------------------------*/\n  function removeDuplicates(originalArray, prop) {\n    var newArray = [];\n    var lookupObject = {};\n    for (var i in originalArray) {\n      lookupObject[originalArray[i][prop]] = originalArray[i];\n    }\n    for (i in lookupObject) {\n      newArray.push(lookupObject[i]);\n    }\n    return newArray;\n  }\n  //reference:https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n  var uniqueArray = removeDuplicates(abData, \"alberta_health_services_zone\");\n  /*--------------------------------------Finalize the array-------------------------*/\n  function finalizeArray(originalArray, uniqueArray) {\n    var finalArray = [];\n    for (let i = 0; i < uniqueArray.length; i++) {\n      var newObject = {};\n      newObject[\"alberta_health_services_zone\"] =\n        uniqueArray[i][\"alberta_health_services_zone\"];\n      var zoneArray = originalArray.filter(\n        (city) =>\n          city[\"alberta_health_services_zone\"] ===\n          uniqueArray[i][\"alberta_health_services_zone\"]\n      );\n      newObject[\"total case\"] = zoneArray.length;\n      newObject[\"total active\"] = zoneArray.filter(\n        (active) => active[\"case_status\"] === \"Active\"\n      ).length;\n      newObject[\"total death\"] = zoneArray.filter(\n        (death) => death[\"case_status\"] === \"Died\"\n      ).length;\n      finalArray.push(newObject);\n    }\n    return finalArray;\n  }\n  /*---------------------------------Array has been finalized-----------------------*/\n  var array = finalizeArray(abData, uniqueArray);\n  \n  return (\n    <div>\n\n      <div className=\"App_header\">\n        <Header header = 'Alberta Covid-19 Tracker' ></Header>\n      </div>\n      \n        <React.Fragment style={{ width: \"20%\", opacity: \"90%\" }}>\n        <h2 style={{marginLeft:\"10%\" ,marginRight:\"30%\"}}> Alberta total:  {abData.length}</h2>\n        <Grid container >\n        <React.Fragment>\n        \n          {array.map(function (zone) {\n            return (\n                <Card\n                  name={zone[\"alberta_health_services_zone\"]}\n                  total={zone[\"total case\"]}\n                  active={zone[\"total active\"]}\n                  died={zone[\"total death\"]}\n                />\n        \n            );\n          })}\n          </React.Fragment>\n          </Grid>\n        </React.Fragment>\n       \n\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}