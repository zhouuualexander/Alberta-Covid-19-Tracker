{"version":3,"sources":["images/edmonton-banner.jpg","images/calgary_final_revised.jpg","components/dataVisualize/map.js","components/informationCard.js","components/otherinformation.js","components/imgMediaCard.js","components/copyright.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MapContainer","props","googleMapsApiKey","mapContainerStyle","height","width","marginLeft","marginRight","zoom","center","lat","lng","cities","map","city","key","options","useStyles","makeStyles","root","minWidth","marginTop","marginBottom","bullet","display","margin","transform","title","fontSize","pos","SimpleCard","classes","name","Card","className","CardContent","style","justifyContent","textAlign","backgroundColor","Typography","variant","component","total","active","died","color","OtherInformation","Fragment","array","zone","maxWidth","ImgMediaCard","CardActionArea","disabled","CardMedia","alt","src","require","gutterBottom","CardActions","Button","size","target","href","Copyright","align","Link","Date","getFullYear","React","Component","App","useState","abOlddata","setabOlddata","abData","setabData","yesterday","date","setDate","getDate","getMonth","getYesterdaysDate","useEffect","fetch","method","headers","then","resp","json","catch","error","console","log","originalArray","uniqueArray","finalArray","i","newObject","zoneArray","filter","length","death","push","finalizeArray","prop","newArray","lookupObject","removeDuplicates","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","Container","disableGutters","overflow","minHeight","Box","bgcolor","alignItems","noWrap","my","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ddefe384.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edmonton-banner.37de0d12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calgary_final_revised.b96e6bf0.jpg\";","import React from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Circle } from '@react-google-maps/api';\n\n\nconst MapContainer = (props) => {\n  \n  const mapStyles = {        \n    height: \"30vh\",\n    width: \"90vh\",\n    marginLeft:\"auto\",\n    marginRight:\"auto\"\n    };\n  \n  const defaultCenter = {\n    lat: 54.861, lng: -116.4938\n  }\n\n  // const options = {\n  //   strokeColor: '#FF0000',\n  //   strokeOpacity: 0.8,\n  //   strokeWeight: 2,\n  //   fillColor: '#FF0000',\n  //   fillOpacity: 0.35,\n  //   clickable: false,\n  //   draggable: false,\n  //   editable: false,\n  //   visible: true,\n  //   radius: 50000,\n  //   zIndex: 1\n  // }\n  \n\n \n  return (\n     <LoadScript\n       googleMapsApiKey='AIzaSyA3lBAg4Tn0DQvw9gJ8ZRBKV52nLzCru1E'>\n        <GoogleMap\n        \n          mapContainerStyle={mapStyles}\n          zoom={4.8}\n          center={defaultCenter}\n        >\n          {props.cities.map(function (city) {\n           \n            return (\n              <div  key={city[0][\"lat\"]}>\n              <Circle\n             \n              // optional\n             \n              // required\n              center={city[0]}\n              // required\n              options={city[1]}\n            />\n           \n          </div>\n        \n            );\n          })}\n              \n        \n            \n          \n            </GoogleMap>\n     </LoadScript>\n  )\n  }\nexport default MapContainer;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 260,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst SimpleCard = function (props) {\n  const classes = useStyles();\n  if (props.name === \"Edmonton Zone\" || props.name === \"Calgary Zone\") {\n    return (\n      <Card className={classes.root}>\n        <CardContent\n          style={{\n            margin: \"0\",\n            justifyContent: \"center\",\n            textAlign: \"center\",\n            fontSize: \"3vw\",\n            backgroundColor:\"#AEC6EC\"\n          }}\n        >\n          <Typography variant=\"h4\" component=\"h2\" style={{ fontSize: \"2vw\" }}>\n            {props.name}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" style={{ fontSize: \"1vw\" }}>\n            Total cases: {props.total}\n            <br />\n            Active cases: {props.active}\n            <br />\n            Deaths: {props.died}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  } else {\n    return (\n      <Card className={classes.root}>\n        <CardContent\n          style={{ margin: \"0\", justifyContent: \"center\", textAlign: \"center\",backgroundColor:\"#AEC6EC\",color:\"#2B588E\"}}\n        >\n          <Typography variant=\"h5\" component=\"h2\" >\n            {props.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Total cases: {props.total}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n};\nexport default SimpleCard;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"../components/informationCard\";\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"left\",\n  },\n});\n\nconst OtherInformation = function (props) {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      {props.array.map((zone) => {\n        if (\n          zone[\"alberta_health_services_zone\"] !== \"Edmonton Zone\" &&\n          zone[\"alberta_health_services_zone\"] !== \"Calgary Zone\" &&\n          zone[\"alberta_health_services_zone\"] !== \"Unknown\"\n        ) {\n          return (\n            <Card \n              className={classes.root}\n              key={zone[\"alberta_health_services_zone\"]}\n              name={zone[\"alberta_health_services_zone\"]}\n              total={zone[\"total case\"]}\n            />\n          );\n        } else {\n          return \"\";\n        }\n      })}\n    </React.Fragment>\n  );\n};\nexport default OtherInformation;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth:400,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight:10,\n    \n  },\n});\n\n\nexport default function ImgMediaCard(props) {\n  const classes = useStyles();\n  \n  return (\n    <React.Fragment>\n    {props.array.map((zone)=> {\n      if(zone[\"alberta_health_services_zone\"]===\"Edmonton Zone\" || zone[\"alberta_health_services_zone\"]===\"Calgary Zone\"){\n        return (\n          <Card className={classes.root} key={zone[\"alberta_health_services_zone\"]}  style={{backgroundColor:\"#AEC6EC\",color:\"#2B588E\"}}>\n          <CardActionArea disabled >\n            <CardMedia\n              \n              component=\"img\"\n              alt={zone[\"alberta_health_services_zone\"]===\"Edmonton Zone\"?\"Edmonton Zone\":\n              \"Calgary Zone\"}\n              height=\"300px\"\n              \n              src={zone[\"alberta_health_services_zone\"]===\"Edmonton Zone\"?\n              require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/images/edmonton-banner.jpg'):\n              require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/images/calgary_final_revised.jpg')}\n              title={zone[\"alberta_health_services_zone\"]===\"Edmonton Zone\"?\"Edmonton Zone\":\n              \"Calgary Zone\"}\n            />\n            <CardContent >\n              <Typography gutterBottom variant=\"h5\" component=\"h2\" >\n                {zone[\"alberta_health_services_zone\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                {\"Total cases\"} {zone[\"total case\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                {\"Active cases\"} {zone[\"total active\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                {\"Death cases\"} {zone[\"total death\"]}\n              </Typography>\n            </CardContent>\n            \n          </CardActionArea>\n          <CardActions>\n            \n            <Button size=\"small\" color=\"primary\" target=\"_blank\" href=\"https://www.edmonton.ca/programs_services/emergency_preparedness/covid-19.aspx\">\n              Learn More\n            </Button>\n          </CardActions>\n        </Card>\n        );\n      }\n      else{\n        return('')\n      }   \n    })}\n  </React.Fragment>\n    \n  );\n}\n","import \"moment-timezone\";\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nclass Copyright extends React.Component {\n  \n    render() {\n      return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" style={{color:\"#AEC6EC\"}}>\n          {\"Copyright © \"}\n          <Link color=\"inherit\" href=\"https://www.linkedin.cn/in/zijian-zhou/\">\n            {\"Zijian Zhou\"}\n          </Link>{\" \"}\n          {new Date().getFullYear()}\n          {\".\"}\n        </Typography>\n      );\n    }\n  }\n  export default Copyright;","import \"moment-timezone\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport MapContainer from \"./components/dataVisualize/map\";\nimport OtherInformation from \"./components/otherinformation\";\nimport ImgMediaCard from \"./components/imgMediaCard\";\nimport Container from \"@material-ui/core/Container\";\nimport Copyright from \"./components/copyright\";\n\nfunction App() {\n  /***********get data from API ******************************************************8 */\n  var albertaData = [];\n  var albertaOlddata = [];\n  const [abOlddata, setabOlddata] = useState(albertaOlddata);\n  const [abData, setabData] = useState(albertaData);\n\n  /**\n   * /**\n   * @param {void} getYesterdaysDate - this function is help to get yesterday's date .\n   */\n\n  function getYesterdaysDate() {\n    let date = new Date();\n    date.setDate(date.getDate() - 2);\n    return (\n      date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n    );\n  }\n\n  let yesterday = getYesterdaysDate();\n\n  useEffect(() => {\n    fetch(\n      `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"applicaiton/json\",\n        },\n      }\n    )\n      .then((resp) => resp.json())\n      .then((resp) => setabData(resp))\n      .catch((error) => console.log(error));\n  }, []);\n  /**************************************************************************** */\n  useEffect(() => {\n    fetch(\n      `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$where=date_reported between '2020-03-06' and '${yesterday}'&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"applicaiton/json\",\n        },\n      }\n    )\n      .then((resp) => resp.json())\n      .then((resp) => setabOlddata(resp))\n      .catch((error) => console.log(error));\n  }, [yesterday]);\n  /*----------------------------------------removeDuplicates-------------------------*/\n  function removeDuplicates(originalArray, prop) {\n    let newArray = [];\n    let lookupObject = {};\n    for (let i in originalArray) {\n      lookupObject[originalArray[i][prop]] = originalArray[i];\n    }\n    for (let i in lookupObject) {\n      newArray.push(lookupObject[i]);\n    }\n    return newArray;\n  }\n  //reference:https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n  let uniqueArray = removeDuplicates(abData, \"alberta_health_services_zone\");\n\n  /*--------------------------------------Finalize the array-------------------------*/\n  function finalizeArray(originalArray, uniqueArray) {\n    let finalArray = [];\n    for (let i = 0; i < uniqueArray.length; i++) {\n      let newObject = {};\n      newObject[\"alberta_health_services_zone\"] =\n        uniqueArray[i][\"alberta_health_services_zone\"];\n      let zoneArray = originalArray.filter(\n        (city) =>\n          city[\"alberta_health_services_zone\"] ===\n          uniqueArray[i][\"alberta_health_services_zone\"]\n      );\n      newObject[\"total case\"] = zoneArray.length;\n      newObject[\"total active\"] = zoneArray.filter(\n        (active) => active[\"case_status\"] === \"Active\"\n      ).length;\n      newObject[\"total death\"] = zoneArray.filter(\n        (death) => death[\"case_status\"] === \"Died\"\n      ).length;\n      finalArray.push(newObject);\n    }\n    return finalArray;\n  }\n  /*---------------------------------Array has been finalized-----------------------*/\n  let array = finalizeArray(abData, uniqueArray);\n  if (array.length === 0) return null;\n\n  //city location\n  const edmonton = {\n    lat: 53.5461,\n    lng: -113.4938,\n  };\n\n  const edmonton_options = {\n    strokeColor: \"#FF00FF\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF00FF\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[1][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_edmonton_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[1][\"total case\"] * 10,\n    zIndex: 1,\n  };\n\n  const calgary = {\n    lat: 51.0447,\n    lng: -114.0719,\n  };\n\n  const calgary_options = {\n    strokeColor: \"#FFFF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FFFF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[0][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_calgary_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[0][\"total case\"] * 10,\n    zIndex: 1,\n  };\n  const north = {\n    lat: 57.0,\n    lng: -115.0,\n  };\n  const north_options = {\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[3][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_north_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[3][\"total case\"] * 10,\n    zIndex: 1,\n  };\n  const south = {\n    lat: 50.0,\n    lng: -112.0,\n  };\n  const south_options = {\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[4][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_south_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[4][\"total case\"] * 10,\n    zIndex: 1,\n  };\n  const central = {\n    lat: 52.0,\n    lng: -113.29,\n  };\n  const central_options = {\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[2][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_central_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[2][\"total case\"] * 10,\n    zIndex: 1,\n  };\n\n  const cities = [\n    [edmonton, edmonton_options, total_edmonton_options],\n    [calgary, calgary_options, total_calgary_options],\n    [north, north_options, total_north_options],\n    [south, south_options, total_south_options],\n    [central, central_options, total_central_options],\n  ];\n\n  return (\n    <div>\n      <Container disableGutters={true} maxWidth={false} style={{backgroundColor:\"#2B588E\" ,overflow:\"scroll\",minHeight:\"100vh\"}} >\n        <Box display=\"flex\"  justifyContent=\"center\" bgcolor=\"#AEC6EC\" height=\"auto\" alignItems=\"center\" >\n          <Typography\n            variant=\"h1\"\n            component=\"h1\"\n            gutterBottom={false}\n            noWrap\n            align={\"center\"}\n            style={{ fontSize: \"2vw\" ,height:\"auto\",marginTop:\"20px\",marginBottom:\"20px\" ,color:\"#2B588E\"}}\n            \n          >\n            Alberta Covid-19 Tracker\n          </Typography>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Typography\n            variant=\"h4\"\n            component=\"h1\"\n            gutterBottom={false}\n            noWrap\n            style={{ fontSize: \"1vw\" ,color:\"#AEC6EC\",marginTop:\"10px\"}}\n          >\n            Alberta total: {abData.length}\n          </Typography>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Typography\n            variant=\"h4\"\n            component=\"h1\"\n            gutterBottom\n            noWrap\n            style={{ fontSize: \"1vw\" ,color:\"#AEC6EC\"}}\n          >\n            Alberta today increased cases: {abData.length - abOlddata.length}\n          </Typography>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" marginLeft=\"auto\">\n          <ImgMediaCard array={array} />\n        </Box>\n        {/* <Box display=\"flex\" justifyContent=\"center\" >\n          <CityInformation array={array} />\n        </Box> */}\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          marginTop={1}\n          marginLeft=\"auto\"\n          marginRight=\"auto\"\n        >\n          <OtherInformation array={array} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" marginTop={1}>\n          <MapContainer cities={cities} />\n        </Box>\n\n        <Box display=\"flex\" my={1} justifyContent=\"left\" marginLeft={\"10%\"}>\n          <Typography variant=\"h6\" component=\"h1\" gutterBottom noWrap style={{color:\"#AEC6EC\"}}>\n            Pink circle: Edmonton Active Cases{\" \"}\n          </Typography>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"left\" marginLeft={\"10%\"}>\n          <Typography variant=\"h6\" component=\"h1\" gutterBottom noWrap style={{color:\"#AEC6EC\"}}>\n            Yellow circle: Calgary Active Cases\n          </Typography>\n        </Box>\n\n        <Copyright />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}