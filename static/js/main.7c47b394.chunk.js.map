{"version":3,"sources":["components/edmonton-banner.jpg","components/calgary_final_revised.jpg","components/informationCard.js","components/dataVisualize/map.js","components/otherinformation.js","components/imgMediaCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","root","minWidth","marginLeft","marginTop","marginBottom","marginRight","bullet","display","margin","transform","title","fontSize","pos","SimpleCard","props","classes","name","Card","className","CardContent","style","justifyContent","textAlign","Typography","variant","component","total","active","died","MapContainer","googleMapsApiKey","mapContainerStyle","height","width","zoom","center","lat","lng","cities","map","city","options","OtherInformation","Fragment","array","zone","maxWidth","ImgMediaCard","CardActionArea","disabled","CardMedia","alt","src","require","gutterBottom","color","CardActions","Button","size","target","href","Copyright","align","Link","Date","getFullYear","React","Component","App","useState","abOlddata","setabOlddata","abData","setabData","yesterday","date","setDate","getDate","getMonth","getYesterdaysDate","removeDuplicates","originalArray","prop","newArray","lookupObject","i","push","useEffect","fetch","method","headers","then","resp","json","catch","error","console","log","uniqueArray","uniqueOldArray","finalizeArray","finalArray","newObject","zoneArray","filter","length","death","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","Container","alignContent","Box","my","noWrap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7c47b394.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edmonton-banner.37de0d12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calgary_final_revised.b96e6bf0.jpg\";","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Autocomplete } from \"@react-google-maps/api\";\n\nconst useStyles = makeStyles({\n  root: {\n    \n    minWidth:100,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight:10,\n    \n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst SimpleCard = function(props) {\n  const classes = useStyles();\n  if(props.name==\"Edmonton Zone\"||props.name==\"Calgary Zone\"){\n    return (\n    \n      <Card className={classes.root} >\n        <CardContent style={{margin:\"0\",justifyContent: \"center\",textAlign: \"center\",fontSize:\"3vw\"}}>\n          <Typography variant=\"h4\" component=\"h2\" style={{fontSize:\"2vw\"}}>\n            {props.name}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" style={{fontSize:\"1vw\"}}>\n            Total cases: {props.total}\n            <br />\n            Active cases: {props.active}\n            <br />\n            Deaths: {props.died}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n  else{\n    return(\n      <Card className={classes.root} >\n        <CardContent style={{margin:\"0\",justifyContent: \"center\",textAlign: \"center\",}}>\n          <Typography variant=\"h4\" component=\"h2\" style={{fontSize:\"2vw\"}}>\n            {props.name}\n          </Typography>\n          <Typography variant=\"body1\" component=\"p\" style={{fontSize:\"1vw\"}}>\n            Total cases: {props.total}\n\n          </Typography>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n}\nexport default SimpleCard;\n","import React from 'react';\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\nimport { Circle } from '@react-google-maps/api';\n\n\nconst MapContainer = (props) => {\n  \n  const mapStyles = {        \n    height: \"30vh\",\n    width: \"90vh\",\n    marginLeft:\"auto\",\n    marginRight:\"auto\"\n    };\n  \n  const defaultCenter = {\n    lat: 54.861, lng: -116.4938\n  }\n\n  // const options = {\n  //   strokeColor: '#FF0000',\n  //   strokeOpacity: 0.8,\n  //   strokeWeight: 2,\n  //   fillColor: '#FF0000',\n  //   fillOpacity: 0.35,\n  //   clickable: false,\n  //   draggable: false,\n  //   editable: false,\n  //   visible: true,\n  //   radius: 50000,\n  //   zIndex: 1\n  // }\n  \n\n \n  return (\n     <LoadScript\n       googleMapsApiKey='AIzaSyA3lBAg4Tn0DQvw9gJ8ZRBKV52nLzCru1E'>\n        <GoogleMap\n        \n          mapContainerStyle={mapStyles}\n          zoom={4.8}\n          center={defaultCenter}\n        >\n          {props.cities.map(function (city) {\n           \n            return (\n              <div>\n              <Circle\n              // optional\n             \n              // required\n              center={city[0]}\n              // required\n              options={city[1]}\n            />\n           \n          </div>\n        \n            );\n          })}\n              \n        \n            \n          \n            </GoogleMap>\n     </LoadScript>\n  )\n  }\nexport default MapContainer;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"../components/informationCard\";\nconst useStyles = makeStyles({\n    root: {\n      display:\"flex\",\n      justifyContent:\"left\",\n    },\n   \n  });\n  \nconst OtherInformation = function (props) {\n    const classes = useStyles();\n  return (\n   \n      <React.Fragment className={classes.root} >\n        {props.array.map(function (zone) {\n          if(zone[\"alberta_health_services_zone\"]!==\"Edmonton Zone\" &&zone[\"alberta_health_services_zone\"]!==\"Calgary Zone\"&&zone[\"alberta_health_services_zone\"]!==\"Unknown\"){\n            return (\n              <Card\n                name={zone[\"alberta_health_services_zone\"]}\n                total={zone[\"total case\"]}\n              />\n            );\n          }\n          \n        })}\n      </React.Fragment>\n   \n  );\n};\nexport default OtherInformation;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth:400,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight:10,\n    \n  },\n});\n\n\nexport default function ImgMediaCard(props) {\n  const classes = useStyles();\n  \n  return (\n    <React.Fragment>\n    {props.array.map(function (zone) {\n      if(zone[\"alberta_health_services_zone\"]===\"Edmonton Zone\"){\n        return (\n          <Card className={classes.root} >\n          <CardActionArea disabled>\n            <CardMedia\n              component=\"img\"\n              alt=\"Edmonton Zone\"\n              height=\"300px\"\n              src={require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/components/edmonton-banner.jpg')}\n              title=\"Edmonton Zone\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {zone[\"alberta_health_services_zone\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {\"Total cases\"} {zone[\"total case\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {\"Active cases\"} {zone[\"total active\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {\"Death cases\"} {zone[\"total death\"]}\n              </Typography>\n            </CardContent>\n            \n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\">\n              Share\n            </Button>\n            <Button size=\"small\" color=\"primary\" target=\"_blank\" href=\"https://www.edmonton.ca/programs_services/emergency_preparedness/covid-19.aspx\">\n              Learn More\n            </Button>\n          </CardActions>\n        </Card>\n        );\n      }\n      if(zone[\"alberta_health_services_zone\"]===\"Calgary Zone\"){\n        return (\n          <Card className={classes.root}>\n          <CardActionArea disabled>\n            <CardMedia\n              component=\"img\"\n              alt=\"Calgary Zone\"\n              height=\"300px\"\n              src={require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/components/calgary_final_revised.jpg')}\n              title=\"Calgary Zone\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {zone[\"alberta_health_services_zone\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {\"Total cases\"} {\"  \"}{zone[\"total case\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {\"Active cases\"} {zone[\"total active\"]}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {\"Death cases\"} {zone[\"total death\"]}\n              </Typography>\n            </CardContent>\n            \n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\" >\n              Share\n            </Button>\n            <Button size=\"small\" color=\"primary\" target=\"_blank\" href=\"https://www.calgary.ca/csps/cema/covid19/response-to-coronavirus.html\">\n              Learn More\n            </Button>\n          </CardActions>\n        </Card>\n        );\n      }\n\n      \n    })}\n  </React.Fragment>\n    \n  );\n}\n","import \"moment-timezone\";\nimport React, { useState, useEffect } from \"react\";\nimport CityInformation from \"./components/cityInformation\";\nimport \"./App.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from '@material-ui/core/Grid';\nimport MapContainer from \"./components/dataVisualize/map\";\nimport OtherInformation from \"./components/otherinformation\";\nimport ImgMediaCard from \"./components/imgMediaCard\";\nimport Container from '@material-ui/core/Container';\n\nclass Copyright extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {\"Copyright © \"}\n        <Link color=\"inherit\" href=\"https://www.linkedin.cn/in/zijian-zhou/\">\n          {\"Zijian Zhou\"}\n        </Link>{\" \"}\n        {new Date().getFullYear()}\n        {\".\"}\n      </Typography>\n    );\n  }\n}\nfunction App() {\n  /***********get data from API ******************************************************8 */\n  var albertaData = [];\n  var albertaOlddata = [];\n  const [abOlddata, setabOlddata] = useState(albertaOlddata);\n  const [abData, setabData] = useState(albertaData);\n\n  /**\n   * /**\n   * @param {void} getYesterdaysDate - this function is help to get yesterday's date .\n   */\n\n  function getYesterdaysDate() {\n    var date = new Date();\n    date.setDate(date.getDate() - 2);\n    return (\n      date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n    );\n  }\n\n  var yesterday = getYesterdaysDate();\n\n  useEffect(() => {\n    fetch(\n      `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"applicaiton/json\",\n        },\n      }\n    )\n      .then((resp) => resp.json())\n      .then((resp) => setabData(resp))\n      .catch((error) => console.log(error));\n  }, []);\n  /**************************************************************************** */\n  useEffect(() => {\n    fetch(\n      `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$where=date_reported between '2020-03-06' and '${yesterday}'&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"applicaiton/json\",\n        },\n      }\n    )\n      .then((resp) => resp.json())\n      .then((resp) => setabOlddata(resp))\n      .catch((error) => console.log(error));\n  }, []);\n  /*----------------------------------------removeDuplicates-------------------------*/\n  function removeDuplicates(originalArray, prop) {\n    var newArray = [];\n    var lookupObject = {};\n    for (var i in originalArray) {\n      lookupObject[originalArray[i][prop]] = originalArray[i];\n    }\n    for (i in lookupObject) {\n      newArray.push(lookupObject[i]);\n    }\n    return newArray;\n  }\n  //reference:https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n  var uniqueArray = removeDuplicates(abData, \"alberta_health_services_zone\");\n  var uniqueOldArray = removeDuplicates(\n    abOlddata,\n    \"alberta_health_services_zone\"\n  );\n  /*--------------------------------------Finalize the array-------------------------*/\n  function finalizeArray(originalArray, uniqueArray) {\n    var finalArray = [];\n    for (let i = 0; i < uniqueArray.length; i++) {\n      var newObject = {};\n      newObject[\"alberta_health_services_zone\"] =\n        uniqueArray[i][\"alberta_health_services_zone\"];\n      var zoneArray = originalArray.filter(\n        (city) =>\n          city[\"alberta_health_services_zone\"] ===\n          uniqueArray[i][\"alberta_health_services_zone\"]\n      );\n      newObject[\"total case\"] = zoneArray.length;\n      newObject[\"total active\"] = zoneArray.filter(\n        (active) => active[\"case_status\"] === \"Active\"\n      ).length;\n      newObject[\"total death\"] = zoneArray.filter(\n        (death) => death[\"case_status\"] === \"Died\"\n      ).length;\n      finalArray.push(newObject);\n    }\n    return finalArray;\n  }\n  /*---------------------------------Array has been finalized-----------------------*/\n  var array = finalizeArray(abData, uniqueArray);\n  if (array.length === 0) return null;\n\n  var oldarray = finalizeArray(abOlddata, uniqueOldArray);\n\n  //city location\n  const edmonton = {\n    lat: 53.5461,\n    lng: -113.4938,\n  };\n\n  const edmonton_options = {\n    strokeColor: \"#FF00FF\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF00FF\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[1][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_edmonton_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[1][\"total case\"] * 10,\n    zIndex: 1,\n  };\n\n  const calgary = {\n    lat: 51.0447,\n    lng: -114.0719,\n  };\n\n  const calgary_options = {\n    strokeColor: \"#FFFF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FFFF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[0][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_calgary_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[0][\"total case\"] * 10,\n    zIndex: 1,\n  };\n  const north = {\n    lat: 57.0,\n    lng: -115.0,\n  };\n  const north_options = {\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[3][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_north_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[3][\"total case\"] * 10,\n    zIndex: 1,\n  };\n  const south = {\n    lat: 50.0,\n    lng: -112.0,\n  };\n  const south_options = {\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[4][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_south_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[4][\"total case\"] * 10,\n    zIndex: 1,\n  };\n  const central = {\n    lat: 52.0,\n    lng: -113.29,\n  };\n  const central_options = {\n    strokeColor: \"#FF0000\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#FF0000\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[2][\"total active\"] * 100,\n    zIndex: 1,\n  };\n  const total_central_options = {\n    strokeColor: \"#00FF00\",\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: \"#00FF00\",\n    fillOpacity: 0.35,\n    clickable: false,\n    draggable: false,\n    editable: false,\n    visible: true,\n    radius: array[2][\"total case\"] * 10,\n    zIndex: 1,\n  };\n\n  const cities = [\n    [edmonton, edmonton_options, total_edmonton_options],\n    [calgary, calgary_options, total_calgary_options],\n    [north, north_options, total_north_options],\n    [south, south_options, total_south_options],\n    [central, central_options, total_central_options],\n  ];\n\n  return (\n    <div>\n      <Container alignContent={'center'} >\n        <Box display=\"flex\" my={2} justifyContent=\"center\">\n          <Typography variant=\"h1\" component=\"h1\" gutterBottom noWrap style={{fontSize:\"4vw\"}}>\n            Alberta Covid-19 Tracker\n          </Typography>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom noWrap style={{fontSize:\"2vw\"}}>\n            Alberta total: {abData.length}\n          </Typography>\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom noWrap style={{fontSize:\"2vw\"}}>\n            Alberta today increased cases: {abData.length - abOlddata.length}\n          </Typography>\n        </Box>\n        <Box display=\"flex\"  justifyContent=\"center\" marginLeft=\"auto\">\n        <ImgMediaCard array={array}/>\n        </Box>\n        {/* <Box display=\"flex\" justifyContent=\"center\" >\n          <CityInformation array={array} />\n        </Box> */}\n        <Box display=\"flex\" justifyContent=\"center\" marginTop={1} marginLeft=\"auto\" marginRight=\"auto\">\n          <OtherInformation array={array} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\" marginTop={1}>\n          <MapContainer cities={cities} />\n        </Box>\n\n        <Box display=\"flex\" my={1} justifyContent=\"left\" marginLeft={\"10%\"}>\n          <Typography variant=\"h6\" component=\"h1\" gutterBottom noWrap>\n            Pink circle: Edmonton Active Cases{\" \"}\n          </Typography>\n        </Box>\n        <Box display=\"flex\"  justifyContent=\"left\" marginLeft={\"10%\"}>\n          <Typography variant=\"h6\" component=\"h1\" gutterBottom noWrap>\n            Yellow circle: Calgary Active Cases\n          </Typography>\n        </Box>\n       \n       \n       \n        <Copyright />\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ScopedCssBaseline from '@material-ui/core/ScopedCssBaseline';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}