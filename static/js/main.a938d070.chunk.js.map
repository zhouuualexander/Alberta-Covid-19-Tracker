{"version":3,"sources":["Assets/edmonton-banner.jpg","Assets/calgary_final_revised.jpg","components/TitleBar/TitleBar.js","components/MapContainer/MapContainer.js","components/Copyright/Copyright.js","Helper/dataFilter.js","constant/city.js","components/InformationCard/InformationCard.js","components/OtherInformation/OtherInformation.js","components/ImgMediaCard/ImgMediaCard.js","components/ZoneCard/ZoneCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","titleBar","props","AppBar","position","color","Toolbar","style","marginLeft","fontSize","marginRight","Typography","variant","noWrap","MapContainer","center","lat","lng","googleMapsApiKey","mapContainerStyle","height","width","zoom","cities","map","city","key","options","backgroundColor","opacity","padding","fontColor","Copyright","align","Link","href","Date","getFullYear","getYesterdaysDate","offset","date","setDate","getDate","getMonth","locationGps","edmonton","calgary","north","south","central","useStyles","makeStyles","root","minWidth","marginTop","marginBottom","bullet","display","margin","transform","title","pos","InformationCard","classes","name","Card","className","CardContent","total","active","died","justifyContent","textAlign","component","OtherInformation","Fragment","array","zone","maxWidth","ImgMediaCard","CardActionArea","disabled","CardMedia","alt","src","require","gutterBottom","CardActions","Button","size","target","ZoneCard","Container","paragraph","data","length","oldData","yesterday","Grid","container","spacing","justify","App","useState","abOlddata","setabOlddata","abData","setabData","dayBeforeYesterday","theme","createMuiTheme","responsiveFontSizes","useEffect","fetch","method","headers","then","resp","json","catch","error","console","log","originalArray","uniqueArray","finalArray","i","newObject","zoneArray","filter","death","push","finalizeArray","prop","newArray","lookupObject","removeDuplicates","locationOptions","edmonton_options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","clickable","draggable","editable","visible","radius","zIndex","total_edmonton_options","calgary_options","total_calgary_options","north_options","total_north_options","south_options","total_south_options","central_options","total_central_options","CssBaseline","TitleBar","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a938d070.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edmonton-banner.37de0d12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/calgary_final_revised.b96e6bf0.jpg\";","import React from \"react\";\nimport { Typography, AppBar, Toolbar } from \"@material-ui/core\";\nimport TrendingDownIcon from '@material-ui/icons/TrendingDown';\n\nconst titleBar = (props) => {\n\n    return (\n        <div>\n\n            <AppBar position=\"relative\" color=\"primary\" >\n                <Toolbar style={{ marginLeft: \"10%\" }}>\n                    <TrendingDownIcon fontSize=\"large\" style={{ marginRight: \"1%\" }} />\n                    <Typography variant=\"h6\" noWrap color=\"inherit\">\n                        Alberta COVID-19 Tracker\n    </Typography>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nexport default titleBar;","import React from \"react\";\nimport { GoogleMap, LoadScript } from \"@react-google-maps/api\";\nimport { Circle } from \"@react-google-maps/api\";\n\nimport { InfoBox } from \"@react-google-maps/api\";\nconst MapContainer = (props) => {\n  const mapStyles = {\n    height: \"30vh\",\n    width: \"100%\",\n  };\n  const defaultCenter = {\n    lat: 54.861,\n    lng: -116.4938,\n  };\n  const center = {\n    lat: 58.545457,\n    lng: -130.843898,\n  };\n  return (\n    <LoadScript googleMapsApiKey=\"AIzaSyA3lBAg4Tn0DQvw9gJ8ZRBKV52nLzCru1E\">\n      <GoogleMap\n        mapContainerStyle={mapStyles}\n        zoom={4.3}\n        center={defaultCenter}\n      >\n        {props.cities.map(function (city) {\n          return (\n            <div key={city[0][\"lat\"]}>\n              <Circle\n                // optional\n\n                // required\n                center={city[0]}\n                // required\n                options={city[1]}\n              />\n              {city[0][\"lat\"] === 53.5461 ? (\n                <InfoBox position={center}>\n                  <div\n                    style={{\n                      backgroundColor: \"white\",\n                      opacity: 0.75,\n                      padding: 12,\n                      width: \"200px\",\n                    }}\n                  >\n                    <div style={{ fontSize: 16, fontColor: `#08233B` }}>\n                      Circle is about active cases\n                    </div>\n                  </div>\n                </InfoBox>\n              ) : null}\n            </div>\n          );\n        })}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\nexport default MapContainer;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nconst Copyright = () => {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://www.linkedin.cn/in/zijian-zhou/\">\n        {\"Zijian Zhou\"}\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n\n};\nexport default Copyright;\n","export const getYesterdaysDate = (offset) => {\n    /**\n     *  yesterday: offset=2, dayBeforeYesterday: offset = 3\n     */\n    let date = new Date();\n    date.setDate(date.getDate() - offset);\n    return (\n        date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n    );\n};\n\n/*----------------------------------------removeDuplicates-------------------------*/\nexport const removeDuplicates = (originalArray, prop) => {\n    let newArray = [];\n    let lookupObject = {};\n    for (let i in originalArray) {\n        lookupObject[originalArray[i][prop]] = originalArray[i];\n    }\n    for (let i in lookupObject) {\n        newArray.push(lookupObject[i]);\n    }\n    return newArray;\n};\n//reference:https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript\n\n/*--------------------------------------Finalize the array-------------------------*/\nexport const finalizeArray = (originalArray, uniqueArray) => {\n    let finalArray = [];\n    for (let i = 0; i < uniqueArray.length; i++) {\n        let newObject = {};\n        newObject[\"alberta_health_services_zone\"] =\n            uniqueArray[i][\"alberta_health_services_zone\"];\n        let zoneArray = originalArray.filter(\n            (city) =>\n                city[\"alberta_health_services_zone\"] ===\n                uniqueArray[i][\"alberta_health_services_zone\"]\n        );\n        newObject[\"total case\"] = zoneArray.length;\n        newObject[\"total active\"] = zoneArray.filter(\n            (active) => active[\"case_status\"] === \"Active\"\n        ).length;\n        newObject[\"total death\"] = zoneArray.filter(\n            (death) => death[\"case_status\"] === \"Died\"\n        ).length;\n        finalArray.push(newObject);\n    }\n    return finalArray;\n};","\nconst locationGps = {\n    edmonton: {\n        lat: 53.5461,\n        lng: -113.4938,\n    },\n    calgary: {\n        lat: 51.0447,\n        lng: -114.0719,\n    },\n    north: {\n        lat: 57.0,\n        lng: -115.0,\n    },\n    south: {\n        lat: 50.0,\n        lng: -112.0,\n    },\n    central: {\n        lat: 52.0,\n        lng: -113.29,\n    }\n};\n\nexport default locationGps;\n\n\n\n\n\n\n\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 307,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst InformationCard = (props) => {\n  const classes = useStyles();\n  if (props.name === \"Edmonton Zone\" || props.name === \"Calgary Zone\") {\n    return (\n      <Card className={classes.root}>\n        <CardContent\n        >\n          <Typography variant=\"h4\" >\n            {props.name}\n          </Typography>\n          <Typography variant=\"body1\" >\n            Total cases: {props.total}\n            <br />\n            Active cases: {props.active}\n            <br />\n            Deaths: {props.died}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  } else {\n    return (\n      <Card className={classes.root}>\n        <CardContent\n          style={{ margin: \"0\", justifyContent: \"center\", textAlign: \"center\" }}\n        >\n          <Typography variant=\"h5\" component=\"h2\" >\n            {props.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Total cases: {props.total}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n};\nexport default InformationCard;\n","import React from \"react\";\nimport Card from \"../InformationCard/InformationCard\";\n\n\nconst OtherInformation = (props) => {\n\n  return (\n    <React.Fragment>\n      {props.array.map((zone) => {\n        if (\n          zone[\"alberta_health_services_zone\"] !== \"Edmonton Zone\" &&\n          zone[\"alberta_health_services_zone\"] !== \"Calgary Zone\" &&\n          zone[\"alberta_health_services_zone\"] !== \"Unknown\"\n        ) {\n          return (\n            <Card\n              key={zone[\"alberta_health_services_zone\"]}\n              name={zone[\"alberta_health_services_zone\"]}\n              total={zone[\"total case\"]}\n            />\n          );\n        } else {\n          return \"\";\n        }\n      })}\n    </React.Fragment>\n  );\n};\nexport default OtherInformation;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 400,\n    marginLeft: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight: 10,\n\n  },\n});\nconst ImgMediaCard = (props) => {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      {props.array.map((zone) => {\n        if (zone[\"alberta_health_services_zone\"] === \"Edmonton Zone\" || zone[\"alberta_health_services_zone\"] === \"Calgary Zone\") {\n          return (\n            <Card className={classes.root} key={zone[\"alberta_health_services_zone\"]}  >\n              <CardActionArea disabled >\n                <CardMedia\n                  component=\"img\"\n                  alt={zone[\"alberta_health_services_zone\"] === \"Edmonton Zone\" ? \"Edmonton Zone\" :\n                    \"Calgary Zone\"}\n                  height=\"300px\"\n                  src={zone[\"alberta_health_services_zone\"] === \"Edmonton Zone\" ?\n                    require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/Assets/edmonton-banner.jpg') :\n                    require('/Users/alexzhou/Desktop/alberta-covid-19-tracker/frontend/covid-19-tracker/src/Assets/calgary_final_revised.jpg')}\n                  title={zone[\"alberta_health_services_zone\"] === \"Edmonton Zone\" ? \"Edmonton Zone\" :\n                    \"Calgary Zone\"}\n                />\n                <CardContent >\n                  <Typography gutterBottom variant=\"h5\" component=\"h2\" >\n                    {zone[\"alberta_health_services_zone\"]}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                    {\"Total cases\"} {zone[\"total case\"]}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                    {\"Active cases\"} {zone[\"total active\"]}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" >\n                    {\"Death cases\"} {zone[\"total death\"]}\n                  </Typography>\n                </CardContent>\n\n              </CardActionArea>\n              <CardActions>\n                <Button size=\"small\" color=\"primary\" target=\"_blank\" href=\"https://www.edmonton.ca/programs_services/emergency_preparedness/covid-19.aspx\">\n                  More info @ {zone[\"alberta_health_services_zone\"]}\n                </Button>\n              </CardActions>\n            </Card>\n          );\n        }\n        else {\n          return ('');\n        }\n      })}\n    </React.Fragment>\n\n  );\n};\nexport default ImgMediaCard;","import React from \"react\";\nimport { Typography, Container, Grid } from \"@material-ui/core\";\nimport OtherInformation from \"../OtherInformation/OtherInformation\";\nimport ImgMediaCard from '../ImgMediaCard/ImgMediaCard';\nconst ZoneCard = (props) => {\n    return (\n        <Container maxWidth='md'>\n\n            <Typography variant=\"h4\" align=\"center\" color=\"textSecondary\" paragraph style={{ marginTop: \"2%\" }} >\n                Alberta total: {props.data.length}\n            </Typography>\n\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                Alberta increased cases: {props.data.length - props.oldData.length} on {props.yesterday}\n            </Typography>\n\n\n            <Grid container spacing={2} justify=\"center\">\n                <ImgMediaCard array={props.array} />\n            </Grid>\n            <Grid container spacing={2} justify=\"center\">\n                <OtherInformation array={props.array} />\n            </Grid>\n        </Container>\n    );\n};\nexport default ZoneCard;","import \"moment-timezone\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Container, CssBaseline } from \"@material-ui/core\";\nimport TitleBar from './components/TitleBar/TitleBar';\nimport MapContainer from \"./components/MapContainer/MapContainer\";\nimport Copyright from \"./components/Copyright/Copyright\";\nimport { getYesterdaysDate, removeDuplicates } from './Helper/dataFilter';\nimport { finalizeArray } from './Helper/dataFilter';\nimport locationGps from './constant/city';\nimport ZoneCard from './components/ZoneCard/ZoneCard';\nimport { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles';\n\nconst App = () => {\n  /***********get data from API ******************************************************8 */\n  var albertaData = [];\n  var albertaOlddata = [];\n  const [abOlddata, setabOlddata] = useState(albertaOlddata);\n  const [abData, setabData] = useState(albertaData);\n  let yesterday = getYesterdaysDate(2);\n  let dayBeforeYesterday = getYesterdaysDate(3);\n  let theme = createMuiTheme();\n  theme = responsiveFontSizes(theme);\n  useEffect(() => {\n    fetch(\n      `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"applicaiton/json\",\n        },\n      }\n    )\n      .then((resp) => resp.json())\n      .then((resp) => setabData(resp))\n      .catch((error) => console.log(error));\n  }, []);\n  /**************************************************************************** */\n  useEffect(() => {\n    fetch(\n      `https://data.edmonton.ca/resource/jmcu-tz8y.json?$limit=10000000000&$where=date_reported between '2020-03-06' and '${dayBeforeYesterday}'&$$app_token=CoCmeiMMf8g0Uexp09f2YjYWq`,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"applicaiton/json\",\n        },\n      }\n    )\n      .then((resp) => resp.json())\n      .then((resp) => setabOlddata(resp))\n      .catch((error) => console.log(error));\n  }, [dayBeforeYesterday]);\n\n  let uniqueArray = removeDuplicates(abData, \"alberta_health_services_zone\");\n\n\n  /*---------------------------------Array has been finalized-----------------------*/\n  let array = finalizeArray(abData, uniqueArray);\n  if (array.length === 0) return null;\n\n  //city location\n  const locationOptions = {\n    edmonton_options: {\n      strokeColor: \"#FF00FF\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FF00FF\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[1][\"total active\"] * 100,\n      zIndex: 1,\n    },\n    total_edmonton_options: {\n      strokeColor: \"#00FF00\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#00FF00\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[1][\"total case\"] * 1000,\n      zIndex: 1,\n    }, calgary_options: {\n      strokeColor: \"#FFFF00\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FFFF00\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[0][\"total active\"] * 100,\n      zIndex: 1,\n    }, total_calgary_options: {\n      strokeColor: \"#00FF00\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#00FF00\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[0][\"total case\"] * 10,\n      zIndex: 1,\n    }, north_options: {\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[3][\"total active\"] * 100,\n      zIndex: 1,\n    }, total_north_options: {\n      strokeColor: \"#00FF00\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#00FF00\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[3][\"total case\"] * 10,\n      zIndex: 1,\n    }, south_options: {\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[4][\"total active\"] * 100,\n      zIndex: 1,\n    }, total_south_options: {\n      strokeColor: \"#00FF00\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#00FF00\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[4][\"total case\"] * 10,\n      zIndex: 1,\n    }, central_options: {\n      strokeColor: \"#FF0000\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#FF0000\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[2][\"total active\"] * 100,\n      zIndex: 1,\n    }, total_central_options: {\n      strokeColor: \"#00FF00\",\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: \"#00FF00\",\n      fillOpacity: 0.35,\n      clickable: false,\n      draggable: false,\n      editable: false,\n      visible: true,\n      radius: array[2][\"total case\"] * 10,\n      zIndex: 1,\n    }\n  };\n\n\n\n  const cities = [\n    [locationGps.edmonton, locationOptions.edmonton_options, locationOptions.total_edmonton_options],\n    [locationGps.calgary, locationOptions.calgary_options, locationOptions.total_calgary_options],\n    [locationGps.north, locationOptions.north_options, locationOptions.total_north_options],\n    [locationGps.south, locationOptions.south_options, locationOptions.total_south_options],\n    [locationGps.central, locationOptions.central_options, locationOptions.total_central_options],\n  ];\n  return (\n    // #2B588E\n    <React.Fragment>\n      <CssBaseline />\n      <TitleBar />\n      <main>\n        <ThemeProvider theme={theme}>\n          <Container maxWidth='md'>\n            <ZoneCard data={abData} oldData={abOlddata} yesterday={yesterday} array={array} />\n            <MapContainer cities={cities} />\n          </Container>\n        </ThemeProvider>\n\n      </main>\n      <footer>\n        <Copyright />\n      </footer>\n    </React.Fragment >\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}